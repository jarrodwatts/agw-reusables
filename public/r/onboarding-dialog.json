{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "onboarding-dialog",
  "type": "registry:component",
  "title": "Onboarding Dialog",
  "description": "A configurable multi-step onboarding dialog that guides users through AGW authentication (wallet connection, SIWE, session keys) with progress indication",
  "dependencies": [
    "@abstract-foundation/agw-react",
    "@abstract-foundation/agw-client",
    "wagmi",
    "viem",
    "@tanstack/react-query"
  ],
  "registryDependencies": [
    "dialog",
    "button",
    "connect-wallet-button",
    "siwe-button",
    "session-keys"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/onboarding-dialog/onboarding-dialog.tsx",
      "content": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useAccount } from \"wagmi\"\nimport { cn } from \"@/lib/utils\"\nimport { type ClassValue } from \"clsx\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogTitle,\n} from \"@/registry/new-york/ui/dialog\"\nimport { ConnectWalletButton } from \"@/registry/new-york/blocks/connect-wallet-button/connect-wallet-button\"\nimport { SiweButton } from \"@/registry/new-york/blocks/siwe-button/siwe-button\"\nimport { SessionKeyButton } from \"@/registry/new-york/blocks/session-keys/session-key-button\"\nimport { useSiweAuthQuery } from \"@/registry/new-york/blocks/siwe-button/hooks/use-siwe-auth-query\"\nimport { useSessionKey } from \"@/registry/new-york/blocks/session-keys/hooks/use-session-key\"\n\ninterface OnboardingDialogProps {\n  steps?: {\n    connectWallet?: boolean\n    signWithEthereum?: boolean\n    createSessionKey?: boolean\n  }\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n  onComplete?: () => void\n  onStepComplete?: (step: string) => void\n  className?: ClassValue\n}\n\ninterface StepDefinition {\n  id: string\n  title: string\n  subtitle: string\n  component: React.ComponentType<{ className?: ClassValue }>\n  validate: () => boolean\n}\n\n/**\n * Onboarding Dialog\n * \n * A configurable multi-step onboarding dialog that guides users through:\n * - Wallet connection via ConnectWalletButton\n * - SIWE authentication via SiweButton\n * - Session key creation via SessionKeyButton\n * \n * Features:\n * - Visual progress indicator showing current step\n * - Auto-detection of completed steps\n * - Configurable step selection\n * - Automatic advancement when steps complete\n */\nexport function OnboardingDialog({\n  steps = {\n    connectWallet: true,\n    signWithEthereum: true,\n    createSessionKey: true,\n  },\n  open = false,\n  onOpenChange = () => {},\n  onComplete = () => {},\n  onStepComplete,\n  className,\n}: OnboardingDialogProps) {\n  const { isConnected } = useAccount()\n  const { data: authData } = useSiweAuthQuery()\n  const { data: sessionData } = useSessionKey()\n\n  const [currentStepIndex, setCurrentStepIndex] = useState(0)\n\n  // Check authentication and session status\n  const isAuthenticated = authData?.ok && authData?.user?.isAuthenticated\n  const hasActiveSession = !!sessionData\n\n  // Define all possible steps with their validation logic\n  const allStepDefinitions: StepDefinition[] = [\n    {\n      id: 'connectWallet',\n      title: 'Connect Wallet',\n      subtitle: 'Connect your wallet to get started',\n      component: ConnectWalletButton,\n      validate: () => isConnected,\n    },\n    {\n      id: 'signWithEthereum',\n      title: 'Sign In with Ethereum',\n      subtitle: 'Sign a message to authenticate your identity',\n      component: SiweButton,\n      validate: () => !!(isConnected && isAuthenticated),\n    },\n    {\n      id: 'createSessionKey',\n      title: 'Create Session Key',\n      subtitle: 'Create a session key for seamless transactions',\n      component: SessionKeyButton,\n      validate: () => !!(isConnected && hasActiveSession),\n    },\n  ]\n\n  // Filter to only enabled steps\n  const enabledSteps = allStepDefinitions.filter(step => steps[step.id as keyof typeof steps])\n\n  // Find the first incomplete step or stay at current\n  const findCurrentStep = () => {\n    for (let i = 0; i < enabledSteps.length; i++) {\n      if (!enabledSteps[i].validate()) {\n        return i\n      }\n    }\n    return enabledSteps.length - 1 // All complete, stay at last step\n  }\n\n  // Update current step when validation changes\n  useEffect(() => {\n    if (open) {\n      const newStepIndex = findCurrentStep()\n      if (newStepIndex !== currentStepIndex) {\n        setCurrentStepIndex(newStepIndex)\n      }\n    }\n  }, [isConnected, isAuthenticated, hasActiveSession, open])\n\n  // Check if all required steps are complete\n  const allStepsComplete = enabledSteps.every(step => step.validate())\n\n  // Handle completion\n  useEffect(() => {\n    if (allStepsComplete && open && enabledSteps.length > 0) {\n      // Small delay to show completion state\n      const timer = setTimeout(() => {\n        onComplete()\n        onOpenChange(false)\n      }, 500)\n      return () => clearTimeout(timer)\n    }\n  }, [allStepsComplete, open, onComplete, onOpenChange, enabledSteps.length])\n\n  // Handle step completion callback\n  useEffect(() => {\n    if (onStepComplete && enabledSteps[currentStepIndex]?.validate()) {\n      onStepComplete(enabledSteps[currentStepIndex].id)\n    }\n  }, [currentStepIndex, onStepComplete, enabledSteps])\n\n\n  // Don't render if no steps are enabled\n  if (enabledSteps.length === 0) {\n    return null\n  }\n\n  const currentStep = enabledSteps[currentStepIndex]\n  const StepComponent = currentStep?.component\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className={cn(\"sm:max-w-md\", className)} showCloseButton={true}>\n        <div className=\"flex flex-col items-center space-y-6\">\n          {/* Progress Dots */}\n          <div className=\"flex justify-center space-x-2\">\n            {enabledSteps.map((step, index) => (\n              <div\n                key={step.id}\n                className={cn(\n                  \"h-2 w-2 rounded-full transition-colors\",\n                  step.validate()\n                    ? \"bg-green-500\"\n                    : index === currentStepIndex\n                      ? \"bg-primary\"\n                      : \"bg-muted\"\n                )}\n              />\n            ))}\n          </div>\n\n          {/* Step Title and Description */}\n          <div className=\"text-center space-y-2\">\n            <DialogTitle className=\"text-xl font-semibold\">{currentStep?.title}</DialogTitle>\n            <p className=\"text-muted-foreground\">{currentStep?.subtitle}</p>\n          </div>\n\n          {/* Current Step Component */}\n          <div className=\"w-full\">\n            {StepComponent && (\n              <StepComponent className=\"w-full\" />\n            )}\n          </div>\n\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/onboarding-dialog/hooks/use-require-onboarding.ts",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { useAccount } from \"wagmi\"\nimport { useSiweAuthQuery } from \"@/registry/new-york/blocks/siwe-button/hooks/use-siwe-auth-query\"\nimport { useSessionKey } from \"@/registry/new-york/blocks/session-keys/hooks/use-session-key\"\n\ninterface UseRequireOnboardingOptions {\n  steps: {\n    connectWallet?: boolean\n    signWithEthereum?: boolean\n    createSessionKey?: boolean\n  }\n  onComplete?: () => void\n}\n\ninterface UseRequireOnboardingReturn {\n  ready: boolean\n  isLoading: boolean\n  stepStates: {\n    connectWallet: {\n      completed: boolean\n      loading: boolean\n    }\n    signWithEthereum: {\n      completed: boolean\n      loading: boolean\n    }\n    createSessionKey: {\n      completed: boolean\n      loading: boolean\n    }\n  }\n  showModal: () => void\n  require: (callback: () => void) => void\n  _modalState: {\n    open: boolean\n    onOpenChange: (open: boolean) => void\n    onComplete: () => void\n    steps: {\n      connectWallet?: boolean\n      signWithEthereum?: boolean\n      createSessionKey?: boolean\n    }\n  }\n}\n\n/**\n * Hook for managing onboarding requirements and gating functionality\n * \n * Provides:\n * - ready: boolean indicating if all required steps are completed\n * - showModal: function to manually open the onboarding modal\n * - require: function to gate actions behind onboarding completion\n * \n * @param options Configuration for required onboarding steps\n * @returns Object with ready state and control functions\n */\nexport function useRequireOnboarding({\n  steps,\n  onComplete,\n}: UseRequireOnboardingOptions): UseRequireOnboardingReturn {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  \n  // Get current authentication state\n  const { isConnected, isConnecting, isReconnecting } = useAccount()\n  const { data: authData, isLoading: isAuthLoading } = useSiweAuthQuery()\n  const { data: sessionData, isLoading: isSessionLoading } = useSessionKey()\n\n  // Check authentication and session status\n  const isAuthenticated = !!(authData?.ok && authData?.user?.isAuthenticated)\n  const hasActiveSession = !!sessionData\n\n  // Determine if any authentication process is loading\n  const isLoading = !!(isConnecting || isReconnecting || \n    (steps.signWithEthereum && isAuthLoading) ||\n    (steps.createSessionKey && isSessionLoading))\n\n  // Determine if each step is completed\n  const stepCompletionState = {\n    connectWallet: isConnected,\n    signWithEthereum: isConnected && isAuthenticated,\n    createSessionKey: isConnected && hasActiveSession,\n  }\n\n  // Check if all required steps are completed\n  const ready = Object.entries(steps).every(([stepKey, required]) => {\n    if (!required) return true\n    return stepCompletionState[stepKey as keyof typeof stepCompletionState]\n  })\n\n  // Function to manually show the modal\n  const showModal = () => {\n    setIsModalOpen(true)\n  }\n\n  // Function to gate actions behind onboarding completion\n  const require = (callback: () => void) => {\n    if (ready) {\n      // All required steps completed, execute the callback\n      callback()\n    } else {\n      // Missing required steps, show the onboarding modal\n      setIsModalOpen(true)\n    }\n  }\n\n  // Handle modal completion\n  const handleComplete = () => {\n    setIsModalOpen(false)\n    onComplete?.()\n  }\n\n  // Handle modal close\n  const handleModalClose = (open: boolean) => {\n    setIsModalOpen(open)\n  }\n\n  // Calculate detailed step states\n  const stepStates = {\n    connectWallet: {\n      completed: isConnected,\n      loading: isConnecting || isReconnecting,\n    },\n    signWithEthereum: {\n      completed: isConnected && isAuthenticated,\n      loading: steps.signWithEthereum && isAuthLoading,\n    },\n    createSessionKey: {\n      completed: isConnected && hasActiveSession,\n      loading: steps.createSessionKey && isSessionLoading,\n    },\n  }\n\n  return {\n    ready,\n    isLoading,\n    stepStates,\n    showModal,\n    require,\n    // Internal state for the modal (consumed by components using this hook)\n    _modalState: {\n      open: isModalOpen,\n      onOpenChange: handleModalClose,\n      onComplete: handleComplete,\n      steps,\n    }\n  }\n}",
      "type": "registry:hook"
    }
  ]
}