{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "nft-gallery",
  "type": "registry:component",
  "title": "NFT Gallery",
  "description": "A responsive NFT gallery component that displays a user's NFTs from the Abstract backend with loading states and customizable layout options",
  "dependencies": [
    "@tanstack/react-query",
    "wagmi",
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "badge",
    "skeleton",
    "aspect-ratio",
    "alert"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/nft-gallery/nft-gallery.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Card, CardContent } from \"@/registry/new-york/ui/card\"\nimport { Badge } from \"@/registry/new-york/ui/badge\"\nimport { Skeleton } from \"@/registry/new-york/ui/skeleton\"\nimport { AspectRatio } from \"@/registry/new-york/ui/aspect-ratio\"\nimport { useNFTs } from \"./hooks/use-nfts\"\nimport type { NFT, NFTGalleryProps } from \"./lib/types\"\nimport { AlertCircle, ImageIcon } from \"lucide-react\"\nimport { Alert, AlertDescription } from \"@/registry/new-york/ui/alert\"\n\nfunction NFTCard({\n  nft,\n  showCollectionName = true,\n  showFloorPrice = false\n}: {\n  nft: NFT\n  showCollectionName?: boolean\n  showFloorPrice?: boolean\n}) {\n  const imageUrl = nft.media?.imageUrl?.medium || nft.media?.imageUrl?.large || nft.imageUrl\n  const hasImage = !!imageUrl\n  const collectionName = nft.collection?.name || nft.contract?.name\n  const floorPrice = nft.floorAsk?.price?.amount?.usd || nft.collection?.floorAskPrice?.amount?.usd\n\n  return (\n    <Card className=\"group overflow-hidden transition-shadow hover:shadow-md p-0 gap-1\">\n      <div className=\"relative\">\n        <AspectRatio ratio={1} className=\"bg-muted overflow-hidden\">\n          {hasImage ? (\n            <img\n              src={imageUrl}\n              alt={nft.name || \"NFT\"}\n              className=\"object-cover absolute inset-0 w-full h-full transition-transform duration-300 group-hover:scale-105\"\n              loading=\"lazy\"\n              onError={(e) => {\n                const target = e.target as HTMLImageElement\n                target.style.display = \"none\"\n                const fallback = target.nextElementSibling as HTMLElement\n                if (fallback) fallback.style.display = \"flex\"\n              }}\n            />\n          ) : null}\n          <div\n            className={cn(\n              \"absolute inset-0 flex items-center justify-center bg-muted\",\n              hasImage && \"hidden\"\n            )}\n          >\n            <ImageIcon className=\"h-8 w-8 text-muted-foreground\" />\n          </div>\n        </AspectRatio>\n\n        {nft.balance && parseInt(nft.balance) > 1 && (\n          <Badge\n            variant=\"secondary\"\n            className=\"absolute top-2 right-2 text-xs\"\n          >\n            Ã—{nft.balance}\n          </Badge>\n        )}\n      </div>\n\n      <div className=\"p-2\">\n        <h3 className=\"font-medium text-sm truncate\" title={nft.name}>\n          {nft.name || `#${nft.tokenId}`}\n        </h3>\n\n        {showCollectionName && collectionName && (\n          <p className=\"text-xs text-muted-foreground truncate mt-1\" title={collectionName}>\n            {collectionName}\n          </p>\n        )}\n\n        {showFloorPrice && floorPrice && (\n          <p className=\"text-xs font-medium text-green-600 mt-1\">\n            ${floorPrice.toFixed(2)}\n          </p>\n        )}\n      </div>\n    </Card>\n  )\n}\n\n\n/**\n * NFT Gallery - A responsive gallery component that displays a user's NFTs\n * \n * Fetches and displays NFTs from the Abstract backend API in a responsive grid layout\n * with support for loading states, error handling, and customizable display options.\n */\nexport function NFTGallery({\n  address,\n  className,\n  columns = { default: 2, sm: 3, md: 4, lg: 6 },\n  showCollectionName = true,\n  showFloorPrice = false,\n  maxItems,\n}: NFTGalleryProps) {\n  const { data, isLoading, error } = useNFTs(address)\n\n  const filteredNfts = data?.nfts?.filter(nft =>\n    !nft.collection?.name?.toLowerCase().includes('abscash')\n  ) || []\n\n  const nfts = maxItems\n    ? filteredNfts.slice(0, maxItems)\n    : filteredNfts\n\n  // Use CSS variables + arbitrary properties to control columns at runtime without relying on dynamic Tailwind class names.\n  // The class below defines grid-template-columns from --cols and updates it at breakpoints.\n  const gridColsClass =\n    \"[grid-template-columns:repeat(var(--cols),minmax(0,1fr))] sm:[--cols:var(--cols-sm)] md:[--cols:var(--cols-md)] lg:[--cols:var(--cols-lg)]\"\n\n  const gridStyle = {\n    // Base columns and breakpoint overrides via CSS vars\n    \"--cols\": String(columns.default ?? 2),\n    \"--cols-sm\": String(columns.sm ?? columns.default ?? 2),\n    \"--cols-md\": String(columns.md ?? columns.sm ?? columns.default ?? 2),\n    \"--cols-lg\": String(columns.lg ?? columns.md ?? columns.sm ?? columns.default ?? 2),\n  } as React.CSSProperties & Record<string, string>\n\n  if (isLoading) {\n    return (\n      <div\n        className={cn(\"grid w-full min-w-0 flex-1 gap-4\", gridColsClass, className)}\n        style={gridStyle}\n      >\n        {Array.from({ length: maxItems || 3 }).map((_, i) => (\n          <Card key={i} className=\"overflow-hidden p-0\">\n            <div className=\"relative\">\n              <AspectRatio ratio={1} className=\"bg-muted\">\n                <Skeleton className=\"h-full w-full\" />\n              </AspectRatio>\n            </div>\n            <div className=\"p-2\">\n              <Skeleton className=\"h-4 w-3/4\" />\n              <Skeleton className=\"h-3 w-1/2 mt-1\" />\n            </div>\n          </Card>\n        ))}\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className={className}>\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Failed to load NFTs. Please try again later.\n          </AlertDescription>\n        </Alert>\n      </div>\n    )\n  }\n\n  if (!nfts.length) {\n    return (\n      <div className={cn(\"text-center py-8\", className)}>\n        <ImageIcon className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n        <h3 className=\"text-lg font-medium mb-2\">No NFTs found</h3>\n        <p className=\"text-muted-foreground\">\n          This wallet doesn't have any NFTs yet.\n        </p>\n      </div>\n    )\n  }\n\n  return (\n    <div\n      className={cn(\"grid w-full min-w-0 flex-1 gap-4\", gridColsClass, className)}\n      style={gridStyle}\n    >\n      {nfts.map((nft) => (\n        <NFTCard\n          key={nft.id}\n          nft={nft}\n          showCollectionName={showCollectionName}\n          showFloorPrice={showFloorPrice}\n        />\n      ))}\n    </div>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/nft-gallery/hooks/use-nfts.ts",
      "content": "import { useQuery } from \"@tanstack/react-query\"\nimport type { NFTGalleryResponse } from \"../lib/types\"\n\nasync function fetchUserNFTs(address: string): Promise<NFTGalleryResponse> {\n    if (!address) {\n        throw new Error(\"Address is required\")\n    }\n\n    const response = await fetch(\n        `https://backend.portal.abs.xyz/api/user/${address}/wallet/v2/nfts`\n    )\n\n    if (!response.ok) {\n        throw new Error(`Failed to fetch NFTs: ${response.statusText}`)\n    }\n\n    return response.json()\n}\n\nexport function useNFTs(address: string, enabled = true) {\n    return useQuery({\n        queryKey: [\"nfts\", address],\n        queryFn: () => fetchUserNFTs(address),\n        enabled: enabled && !!address,\n        staleTime: 5 * 60 * 1000, // 5 minutes\n        gcTime: 10 * 60 * 1000, // 10 minutes\n        retry: 3,\n        retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n    })\n}\n\n\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/blocks/nft-gallery/lib/types.ts",
      "content": "export interface NFTAttribute {\n  trait_type: string\n  value: string | number\n}\n\nexport interface NFTContract {\n  address: string\n  name: string\n  symbol: string\n  type: \"ERC721\" | \"ERC1155\"\n  openSeaSlug?: string\n  description?: string\n  imageUrl?: string\n  externalUrl?: string\n}\n\nexport interface NFTCollection {\n  id: string\n  name: string\n  description?: string\n  imageUrl?: string\n  floorAskPrice?: {\n    amount: {\n      decimal: number\n      usd: number\n    }\n    currency: {\n      contract: string\n      name: string\n      symbol: string\n      decimals: number\n    }\n  }\n}\n\nexport interface NFTMedia {\n  small?: string\n  medium?: string\n  large?: string\n}\n\nexport interface NFTLastSale {\n  orderSource: string\n  fillSource?: string\n  timestamp: number\n  price?: {\n    amount: {\n      decimal: number\n      usd: number\n    }\n    currency: {\n      contract: string\n      name: string\n      symbol: string\n      decimals: number\n    }\n  }\n}\n\nexport interface NFT {\n  id: string\n  chain: string\n  kind: string\n  contract: NFTContract\n  tokenId: string\n  name: string\n  description?: string\n  imageUrl?: string\n  imageOriginalUrl?: string\n  animationOriginalUrl?: string\n  metadataOriginalUrl?: string\n  media?: {\n    imageUrl?: NFTMedia\n    videoUrl?: string\n    audioUrl?: string\n    modelUrl?: string\n  }\n  attributes?: NFTAttribute[]\n  balance: string\n  acquiredAt?: string\n  collection: NFTCollection\n  lastSale?: NFTLastSale\n  floorAsk?: {\n    price?: {\n      amount: {\n        decimal: number\n        usd: number\n      }\n      currency: {\n        contract: string\n        name: string\n        symbol: string\n        decimals: number\n      }\n    }\n  }\n}\n\nexport interface NFTGalleryResponse {\n  nfts: NFT[]\n}\n\nexport interface NFTGalleryProps {\n  address: string\n  className?: string\n  columns?: {\n    default: number\n    sm: number\n    md: number\n    lg: number\n  }\n  showCollectionName?: boolean\n  showFloorPrice?: boolean\n  maxItems?: number\n}",
      "type": "registry:lib"
    }
  ]
}