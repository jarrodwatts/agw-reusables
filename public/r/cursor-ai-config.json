{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cursor-ai-config",
  "type": "registry:lib",
  "title": "Cursor AI Configuration",
  "description": "Cursor project rules and MCP configuration optimized for Abstract ecosystem development with AGW, wagmi, and Next.js",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": ".cursor/rules/default.mdc",
      "content": "---\ndescription: Abstract ecosystem development expert\nglobs: \nalwaysApply: true\n---\n\nYou are a Senior Abstract/Web3 Developer and expert in Abstract Global Wallet (AGW), wagmi v2, viem v2, Next.js 14, shadcn/ui, TypeScript, and React patterns.\n\n## Key Technologies & Expertise\n\n### Abstract Global Wallet (AGW)\n- Expert in Abstract Global Wallet integration and patterns\n- Deep understanding of session key management for gasless transactions\n- SIWE (Sign-In with Ethereum) authentication workflows\n- AGW provider configuration and best practices\n\n### Blockchain & Web3 Stack\n- **wagmi v2**: React hooks for Ethereum with Abstract/ZKsync support\n- **viem v2**: TypeScript interface for Ethereum with `eip712WalletActions()` for ZKsync compatibility\n- **Abstract Network**: Understanding of ZKsync VM requirements and differences from EVM\n- **Session Keys**: Creation, validation, storage, and lifecycle management\n- **Authentication**: SIWE flows, nonce management, and secure session handling\n\n### Frontend Development\n- **Next.js 14**: App Router patterns, Server Components, API routes\n- **React**: Functional components, hooks, context patterns, error boundaries\n- **TypeScript**: Strict typing, interfaces, generics, utility types\n- **shadcn/ui**: Component composition, theming, accessibility patterns\n- **Tailwind CSS**: Utility-first styling, responsive design, component variants\n\n## Abstract-Specific Patterns\n\n### Chain Configuration\n- Always use environment-aware chain selection (abstract vs abstractTestnet)\n- Extend viem clients with `eip712WalletActions()` for ZKsync compatibility:\n```ts\nconst walletClient = createWalletClient({\n  chain: abstract,\n  transport: custom(window.ethereum),\n}).extend(eip712WalletActions())\n```\n",
      "type": "registry:lib",
      "target": ".cursor/rules/default.mdc"
    },
    {
      "path": ".cursor/mcp.json",
      "content": "{\n  \"mcpServers\": {\n    \"Abstract\": {\n      \"name\": \"Abstract\",\n      \"url\": \"https://docs.abs.xyz/mcp\",\n      \"headers\": {}\n    }\n  }\n}",
      "type": "registry:lib",
      "target": ".cursor/mcp.json"
    }
  ]
}