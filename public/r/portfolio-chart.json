{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "portfolio-chart",
  "type": "registry:component",
  "title": "Portfolio Chart",
  "description": "An interactive area chart that displays Abstract Global Wallet portfolio value over time with multiple time period selections",
  "dependencies": [
    "@tanstack/react-query",
    "recharts",
    "date-fns"
  ],
  "registryDependencies": [
    "chart",
    "button",
    "skeleton"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/portfolio-chart/portfolio-chart.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Area, AreaChart, CartesianGrid, XAxis, YAxis } from \"recharts\"\nimport { cn } from \"@/lib/utils\"\nimport {\n  ChartContainer,\n  ChartTooltip,\n} from \"@/registry/new-york/ui/chart\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport { Skeleton } from \"@/registry/new-york/ui/skeleton\"\nimport { usePortfolioData } from \"./hooks/use-portfolio-data\"\nimport { formatTimestamp, formatCurrency } from \"./lib/portfolio-utils\"\nimport { type ClassValue } from \"clsx\"\n\ninterface PortfolioChartProps {\n  className?: ClassValue\n  address: string\n  defaultPeriod?: \"1d\" | \"7d\" | \"30d\"\n}\n\nconst TIME_PERIODS = [\n  { key: \"1d\", label: \"1D\" },\n  { key: \"7d\", label: \"7D\" },\n  { key: \"30d\", label: \"30D\" },\n] as const\n\nconst chartConfig = {\n  value: {\n    label: \"Portfolio Value\",\n    color: \"hsl(var(--chart-1))\",\n  },\n}\n\n/**\n * Portfolio Chart - Displays Abstract Global Wallet portfolio value over time\n * \n * A comprehensive portfolio visualization component that:\n * - Shows portfolio value trends using an area chart\n * - Supports multiple time periods (1h, 1d, 7d, 30d, 1y)\n * - Provides formatted tooltips with currency and timestamp\n * - Handles loading and error states gracefully\n * - Responsive design that adapts to container size\n */\nexport function PortfolioChart({\n  className,\n  address,\n  defaultPeriod = \"7d\"\n}: PortfolioChartProps) {\n  const [selectedPeriod, setSelectedPeriod] = useState<typeof TIME_PERIODS[number][\"key\"]>(defaultPeriod)\n  const { data, isLoading, isError, error } = usePortfolioData(address, selectedPeriod)\n\n  const chartData = data?.map((item) => ({\n    timestamp: item.startTimestamp,\n    value: parseFloat(item.totalUsdValue),\n    formattedTime: formatTimestamp(item.startTimestamp, selectedPeriod),\n  })) ?? []\n\n  if (isError) {\n    return (\n      <div className={cn(\"flex items-center justify-center p-8 text-center\", className)}>\n        <div className=\"space-y-2\">\n          <p className=\"text-sm text-muted-foreground\">\n            Failed to load portfolio data\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            {error?.message || \"Please try again later\"}\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={cn(\"space-y-4 w-full max-w-full\", className)}>\n      {/* Time Period Selector */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <h3 className=\"text-lg font-semibold\">Portfolio Value</h3>\n          {!isLoading && chartData.length > 0 && (\n            <p className=\"text-sm text-muted-foreground\">\n              {formatCurrency(chartData[chartData.length - 1]?.value ?? 0)} current value\n            </p>\n          )}\n        </div>\n        <div className=\"flex gap-1\">\n          {TIME_PERIODS.map((period) => (\n            <Button\n              key={period.key}\n              variant={selectedPeriod === period.key ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedPeriod(period.key)}\n              className=\"h-7 px-2 text-xs\"\n            >\n              {period.label}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Chart */}\n      {isLoading ? (\n        <div className=\"space-y-3\">\n          <Skeleton className=\"h-4 w-32\" />\n          <Skeleton className=\"h-[250px] w-full\" />\n        </div>\n      ) : (\n        <ChartContainer config={chartConfig} className=\"h-[250px] w-full\">\n          <AreaChart\n            data={chartData}\n            margin={{\n              left: 8,\n              right: 8,\n            }}\n          >\n            <defs>\n              <linearGradient id=\"fillValue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop\n                  offset=\"5%\"\n                  stopColor=\"var(--color-value)\"\n                  stopOpacity={0.8}\n                />\n                <stop\n                  offset=\"95%\"\n                  stopColor=\"var(--color-value)\"\n                  stopOpacity={0.1}\n                />\n              </linearGradient>\n            </defs>\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"formattedTime\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              fontSize={12}\n            />\n            <YAxis\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => formatCurrency(value, true, \"USD\", 2)}\n              fontSize={12}\n            />\n            <ChartTooltip\n              cursor={false}\n              content={({ active, payload }) => {\n                if (!active || !payload?.length) return null\n                const data = payload[0]?.payload\n                if (!data) return null\n                \n                return (\n                  <div className=\"rounded-lg border bg-background px-3 py-2 text-sm shadow-md\">\n                    <div className=\"font-medium\">\n                      {formatCurrency(data.value)}\n                    </div>\n                  </div>\n                )\n              }}\n            />\n            <Area\n              dataKey=\"value\"\n              type=\"natural\"\n              fill=\"url(#fillValue)\"\n              stroke=\"var(--color-value)\"\n              strokeWidth={2}\n            />\n          </AreaChart>\n        </ChartContainer>\n      )}\n    </div>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/portfolio-chart/hooks/use-portfolio-data.ts",
      "content": "\"use client\"\n\nimport { useQuery } from \"@tanstack/react-query\"\n\nexport interface PortfolioDataPoint {\n  startTimestamp: number\n  endTimestamp: number\n  totalUsdValue: string\n}\n\nexport interface PortfolioApiResponse {\n  portfolio: {\n    \"1h\": { portfolio: PortfolioDataPoint[] }\n    \"1d\": { portfolio: PortfolioDataPoint[] }\n    \"7d\": { portfolio: PortfolioDataPoint[] }\n    \"30d\": { portfolio: PortfolioDataPoint[] }\n    \"1y\": { portfolio: PortfolioDataPoint[] }\n  }\n}\n\ntype TimePeriod = \"1d\" | \"7d\" | \"30d\"\n\nasync function fetchPortfolioData(\n  address: string,\n  period: TimePeriod\n): Promise<PortfolioDataPoint[]> {\n  if (!address) {\n    throw new Error(\"Address is required\")\n  }\n\n  const response = await fetch(\n    `https://backend.portal.abs.xyz/api/user/${address}/portfolio/value`\n  )\n\n  if (!response.ok) {\n    throw new Error(`Failed to fetch portfolio data: ${response.statusText}`)\n  }\n\n  const data: PortfolioApiResponse = await response.json()\n  \n  if (!data.portfolio || !data.portfolio[period]) {\n    throw new Error(`No portfolio data available for period: ${period}`)\n  }\n\n  return data.portfolio[period].portfolio\n}\n\nexport function usePortfolioData(address: string, period: TimePeriod) {\n  return useQuery({\n    queryKey: [\"portfolio-data\", address, period],\n    queryFn: () => fetchPortfolioData(address, period),\n    enabled: !!address,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchInterval: 60 * 1000, // 1 minute\n    retry: (failureCount, error) => {\n      // Don't retry if it's a client error (4xx)\n      if (error.message.includes(\"404\") || error.message.includes(\"400\")) {\n        return false\n      }\n      return failureCount < 3\n    },\n  })\n}",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/blocks/portfolio-chart/lib/portfolio-utils.ts",
      "content": "import { format, formatDistance } from \"date-fns\"\n\n/**\n * Formats a timestamp for display based on the selected time period\n */\nexport function formatTimestamp(\n  timestamp: number,\n  period: \"1d\" | \"7d\" | \"30d\",\n  detailed = false\n): string {\n  const date = new Date(timestamp * 1000) // Convert from Unix timestamp\n\n  if (detailed) {\n    // For tooltips, show full date and time\n    return format(date, \"MMM d, yyyy 'at' h:mm a\")\n  }\n\n  // Format based on time period for axis labels\n  switch (period) {\n    case \"1d\":\n      return format(date, \"h a\")\n    case \"7d\":\n      return format(date, \"EEE\")\n    case \"30d\":\n      return format(date, \"MMM d\")\n    default:\n      return format(date, \"MMM d\")\n  }\n}\n\n/**\n * Formats a currency value for display\n */\nexport function formatCurrency(\n  value: number,\n  compact = false,\n  currency = \"USD\",\n  forceDecimals?: number\n): string {\n  if (value === 0) return \"$0.00\"\n\n  const minDecimals = forceDecimals !== undefined ? forceDecimals : (value < 1 ? 4 : 2)\n  const maxDecimals = forceDecimals !== undefined ? forceDecimals : (value < 1 ? 4 : 2)\n\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency,\n    notation: compact && Math.abs(value) >= 1000 ? \"compact\" : \"standard\",\n    minimumFractionDigits: minDecimals,\n    maximumFractionDigits: maxDecimals,\n  })\n\n  return formatter.format(value)\n}\n\n/**\n * Calculates the percentage change between two values\n */\nexport function calculatePercentageChange(\n  currentValue: number,\n  previousValue: number\n): number {\n  if (previousValue === 0) return 0\n  return ((currentValue - previousValue) / previousValue) * 100\n}\n\n/**\n * Formats a percentage change with proper styling indicators\n */\nexport function formatPercentageChange(percentage: number): {\n  value: string\n  isPositive: boolean\n  isNeutral: boolean\n} {\n  const isPositive = percentage > 0\n  const isNeutral = percentage === 0\n  \n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const value = formatter.format(percentage / 100)\n  \n  return {\n    value: isPositive ? `+${value}` : value,\n    isPositive,\n    isNeutral,\n  }\n}\n\n/**\n * Gets a human-readable time period description\n */\nexport function getTimePeriodDescription(period: \"1d\" | \"7d\" | \"30d\"): string {\n  switch (period) {\n    case \"1d\":\n      return \"Past 24 Hours\"\n    case \"7d\":\n      return \"Past Week\"\n    case \"30d\":\n      return \"Past Month\"\n    default:\n      return \"Unknown Period\"\n  }\n}",
      "type": "registry:lib"
    }
  ]
}