{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "abstract-app-voting",
  "type": "registry:component",
  "title": "Abstract App Voting",
  "description": "A voting button for Abstract apps that checks vote status and submits votes via Abstract Global Wallet",
  "dependencies": [
    "@abstract-foundation/agw-react",
    "@abstract-foundation/agw-client",
    "wagmi",
    "viem",
    "@tanstack/react-query"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/abstract-voting-button/abstract-voting-button.tsx",
      "content": "\"use client\"\n\nimport { useLoginWithAbstract } from \"@abstract-foundation/agw-react\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport { useAccount } from \"wagmi\"\nimport { cn } from \"@/lib/utils\"\nimport { type ClassValue } from \"clsx\"\nimport { useState } from \"react\"\nimport { toast } from \"sonner\"\nimport { abstract } from \"viem/chains\"\nimport { useUserVoteStatus } from \"./hooks/use-user-vote-status\"\nimport { useVoteForApp } from \"./hooks/use-vote-for-app\"\n\ninterface AbstractVotingButtonProps {\n  appId: string | number | bigint\n  className?: ClassValue\n  children?: React.ReactNode\n  onVoteSuccess?: (data: `0x${string}`) => void\n  onVoteError?: (error: Error) => void\n  disabled?: boolean\n}\n\n/**\n * Abstract Voting Button\n * \n * A voting button component that handles:\n * - Checking if user has already voted for an app\n * - Wallet connection via Abstract Global Wallet\n * - Submitting votes with proper loading states\n * - Error handling and user feedback\n */\nexport function AbstractVotingButton({\n  appId,\n  className,\n  children,\n  onVoteSuccess,\n  onVoteError,\n  disabled = false\n}: AbstractVotingButtonProps) {\n  const { isConnected, chainId } = useAccount()\n  const { login } = useLoginWithAbstract()\n  const [isVoting, setIsVoting] = useState(false)\n\n  // Check if user has already voted for this app\n  const { hasVoted, isLoading: isStatusLoading } = useUserVoteStatus({\n    appId,\n    enabled: isConnected\n  })\n\n  // Hook to submit vote\n  const { voteForApp, isLoading: isVoteLoading, error } = useVoteForApp({\n    onSuccess: (data) => {\n      setIsVoting(false)\n      onVoteSuccess?.(data)\n    },\n    onError: (error) => {\n      setIsVoting(false)\n      onVoteError?.(error)\n    }\n  })\n\n  \n\n  const isLoading = isStatusLoading || isVoteLoading || isVoting\n\n  // Handle vote submission\n  const handleVote = async () => {\n    if (!isConnected) {\n      login()\n      return\n    }\n\n    // Check if user is on testnet and show error toast\n    if (chainId && chainId !== abstract.id) {\n      toast.error(\"App voting is only supported on Abstract mainnet. Please switch networks to vote.\")\n      return\n    }\n\n    if (hasVoted || disabled) {\n      return\n    }\n\n    setIsVoting(true)\n    try {\n      await voteForApp(appId)\n    } catch (err) {\n      setIsVoting(false)\n      // Error handling is done in the hook\n    }\n  }\n\n  // Determine button text and state\n  const getButtonContent = () => {\n    if (children) {\n      return children\n    }\n\n    if (!isConnected) {\n      return (\n        <>\n          Connect to Vote\n          <AbstractLogo className=\"ml-2\" />\n        </>\n      )\n    }\n\n    if (isLoading) {\n      return (\n        <>\n          {isVoting ? \"Voting...\" : \"Loading...\"}\n          <AbstractLogo className=\"ml-2 animate-spin\" />\n        </>\n      )\n    }\n\n    if (hasVoted) {\n      return (\n        <>\n          Voted\n          <CheckIcon className=\"ml-2 h-4 w-4\" />\n        </>\n      )\n    }\n\n    return (\n      <>\n        Upvote on Abstract\n        <VoteIcon className=\"ml-2 h-4 w-4\" />\n      </>\n    )\n  }\n\n  const isButtonDisabled = disabled || isLoading || (isConnected && hasVoted)\n\n  return (\n    <Button\n      onClick={handleVote}\n      disabled={isButtonDisabled}\n      className={cn(\n        \"relative transition-all duration-200\",\n        hasVoted && \"bg-green-600 hover:bg-green-700 text-white\",\n        className\n      )}\n    >\n      {/* Reserve width for the longest default label to prevent layout shift */}\n      <span className=\"invisible whitespace-nowrap\">\n        Upvote on Abstract <VoteIcon className=\"ml-1 h-4 w-4\" />\n      </span>\n      {/* Center the active content over the reserved space */}\n      <span className=\"absolute inset-0 flex items-center justify-center\">\n        {getButtonContent()}\n      </span>\n    </Button>\n  )\n}\n\nfunction VoteIcon({ className }: { className?: ClassValue }) {\n  return (\n    <svg\n      width=\"16\"\n      height=\"16\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={cn(className)}\n    >\n      <path d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.29 1.51 4.04 3 5.5l7 7Z\" />\n    </svg>\n  )\n}\n\nfunction CheckIcon({ className }: { className?: ClassValue }) {\n  return (\n    <svg\n      width=\"16\"\n      height=\"16\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={cn(className)}\n    >\n      <path d=\"M20 6L9 17l-5-5\" />\n    </svg>\n  )\n}\n\nfunction AbstractLogo({ className }: { className?: ClassValue }) {\n  return (\n    <svg\n      width=\"20\"\n      height=\"18\"\n      viewBox=\"0 0 52 47\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(className)}\n    >\n      <path d=\"M33.7221 31.0658L43.997 41.3463L39.1759 46.17L28.901 35.8895C28.0201 35.0081 26.8589 34.5273 25.6095 34.5273C24.3602 34.5273 23.199 35.0081 22.3181 35.8895L12.0432 46.17L7.22205 41.3463L17.4969 31.0658H33.7141H33.7221Z\" fill=\"currentColor\" />\n      <path d=\"M35.4359 28.101L49.4668 31.8591L51.2287 25.2645L37.1978 21.5065C35.9965 21.186 34.9954 20.4167 34.3708 19.335C33.7461 18.2613 33.586 17.0033 33.9063 15.8013L37.6623 1.76283L31.0713 0L27.3153 14.0385L35.4279 28.093L35.4359 28.101Z\" fill=\"currentColor\" />\n      <path d=\"M15.7912 28.101L1.76028 31.8591L-0.00158691 25.2645L14.0293 21.5065C15.2306 21.186 16.2316 20.4167 16.8563 19.335C17.4809 18.2613 17.6411 17.0033 17.3208 15.8013L13.5648 1.76283L20.1558 0L23.9118 14.0385L15.7992 28.093L15.7912 28.101Z\" fill=\"currentColor\" />\n    </svg>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/abstract-voting-button/hooks/use-user-vote-status.ts",
      "content": "\"use client\"\n\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useAccount, useReadContract } from \"wagmi\"\nimport { ABSTRACT_VOTING_ADDRESS, ABSTRACT_VOTING_ABI } from \"../lib/voting-contract\"\nimport { hasUserVotedForApp, formatAppId, isValidAppId } from \"../lib/voting-utils\"\n\ninterface UseUserVoteStatusProps {\n  appId: string | number | bigint\n  enabled?: boolean\n}\n\ninterface UserVoteStatus {\n  hasVoted: boolean\n  isLoading: boolean\n  error: Error | null\n  refetch: () => void\n}\n\n/**\n * Hook to check if the current user has voted for a specific app in the current epoch\n */\nexport function useUserVoteStatus({ appId, enabled = true }: UseUserVoteStatusProps): UserVoteStatus {\n  const { address, isConnected } = useAccount()\n  \n  // Get current epoch\n  const { data: currentEpoch, isLoading: isEpochLoading } = useReadContract({\n    address: ABSTRACT_VOTING_ADDRESS,\n    abi: ABSTRACT_VOTING_ABI,\n    functionName: \"currentEpoch\",\n    query: {\n      enabled: enabled && isConnected,\n    }\n  })\n\n  // Get user votes for current epoch\n  const { \n    data: userVotes, \n    isLoading: isVotesLoading, \n    error,\n    refetch \n  } = useReadContract({\n    address: ABSTRACT_VOTING_ADDRESS,\n    abi: ABSTRACT_VOTING_ABI,\n    functionName: \"getUserVotes\",\n    args: address && currentEpoch ? [address, currentEpoch] : undefined,\n    query: {\n      enabled: enabled && isConnected && !!address && !!currentEpoch && isValidAppId(appId),\n    }\n  })\n\n  // Check if user has voted for this specific app\n  const hasVoted = userVotes ? hasUserVotedForApp(userVotes, formatAppId(appId)) : false\n\n  return {\n    hasVoted,\n    isLoading: isEpochLoading || isVotesLoading,\n    error: error as Error | null,\n    refetch,\n  }\n}",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/blocks/abstract-voting-button/hooks/use-vote-for-app.ts",
      "content": "\"use client\"\n\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { useAccount } from \"wagmi\"\nimport { useAbstractClient } from \"@abstract-foundation/agw-react\"\nimport { ABSTRACT_VOTING_ADDRESS, ABSTRACT_VOTING_ABI } from \"../lib/voting-contract\"\nimport { formatAppId, isValidAppId } from \"../lib/voting-utils\"\n\ninterface UseVoteForAppProps {\n  onSuccess?: (data: `0x${string}`) => void\n  onError?: (error: Error) => void\n}\n\ninterface VoteForAppResult {\n  voteForApp: (appId: string | number | bigint) => Promise<`0x${string}`>\n  isLoading: boolean\n  error: Error | null\n  data: `0x${string}` | undefined\n  reset: () => void\n}\n\n/**\n * Hook to submit a vote for an app using Abstract Global Wallet\n */\nexport function useVoteForApp({ onSuccess, onError }: UseVoteForAppProps = {}): VoteForAppResult {\n  const { isConnected } = useAccount()\n  const { data: abstractClient } = useAbstractClient()\n  const queryClient = useQueryClient()\n\n  // Create mutation for voting\n  const mutation = useMutation({\n    mutationFn: async (appId: string | number | bigint) => {\n      if (!isConnected) {\n        throw new Error(\"Wallet not connected\")\n      }\n\n      if (!abstractClient) {\n        throw new Error(\"Abstract client not available\")\n      }\n\n      if (!isValidAppId(appId)) {\n        throw new Error(`Invalid app ID for voting. App ID: ${appId}`)\n      }\n\n      const formattedAppId = formatAppId(appId)\n\n      // Submit the vote transaction using Abstract client\n      const hash = await abstractClient.writeContract({\n        address: ABSTRACT_VOTING_ADDRESS,\n        abi: ABSTRACT_VOTING_ABI,\n        functionName: \"voteForApp\",\n        args: [formattedAppId],\n      })\n\n      return hash\n    },\n    onSuccess: (data) => {\n      // Invalidate queries to refresh vote status\n      queryClient.invalidateQueries({\n        queryKey: [\"contract\", { address: ABSTRACT_VOTING_ADDRESS }]\n      })\n      onSuccess?.(data)\n    },\n    onError: (error: Error) => {\n      onError?.(error)\n    },\n  })\n\n  return {\n    voteForApp: mutation.mutateAsync,\n    isLoading: mutation.isPending,\n    error: mutation.error as Error | null,\n    data: mutation.data,\n    reset: mutation.reset,\n  }\n}",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/blocks/abstract-voting-button/lib/voting-contract.ts",
      "content": "export const ABSTRACT_VOTING_ADDRESS = \"0x3b50de27506f0a8c1f4122a1e6f470009a76ce2a\" as const\n\nexport const ABSTRACT_VOTING_ABI = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"contract IAppRegistry\", \"name\": \"_appRegistry\", \"type\": \"address\" }, { \"internalType\": \"contract IVoteGovernor\", \"name\": \"_voteGovernor\", \"type\": \"address\" }], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"inputs\": [], \"name\": \"AlreadyInitialized\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"appId\", \"type\": \"uint256\" }], \"name\": \"AlreadyVotedFor\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"AppNotActive\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"IndexOutOfBounds\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"InvalidSchedule\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"InvalidValue\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"NewOwnerIsZeroAddress\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"NoHandoverRequest\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Unauthorized\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"UsedAllVotes\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"VotingNotActive\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"WithdrawFailed\", \"type\": \"error\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"newAppRegistry\", \"type\": \"address\" }], \"name\": \"AppRegistryUpdated\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"pendingOwner\", \"type\": \"address\" }], \"name\": \"OwnershipHandoverCanceled\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"pendingOwner\", \"type\": \"address\" }], \"name\": \"OwnershipHandoverRequested\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"oldOwner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"newOwner\", \"type\": \"address\" }], \"name\": \"OwnershipTransferred\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"user\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"roles\", \"type\": \"uint256\" }], \"name\": \"RolesUpdated\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"startTime\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"epochDuration\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"epochsCompleted\", \"type\": \"uint256\" }], \"name\": \"ScheduleInitialized\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"newGovernor\", \"type\": \"address\" }], \"name\": \"VoteGovernorUpdated\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"voter\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"appId\", \"type\": \"uint256\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"epoch\", \"type\": \"uint256\" }], \"name\": \"Voted\", \"type\": \"event\" }, { \"inputs\": [], \"name\": \"MANAGER_ROLE\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"appRegistry\", \"outputs\": [{ \"internalType\": \"contract IAppRegistry\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"cancelOwnershipHandover\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"pendingOwner\", \"type\": \"address\" }], \"name\": \"completeOwnershipHandover\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"currentEpoch\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"epoch\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"currentSchedule\", \"outputs\": [{ \"internalType\": \"uint40\", \"name\": \"startTime\", \"type\": \"uint40\" }, { \"internalType\": \"uint40\", \"name\": \"epochDuration\", \"type\": \"uint40\" }, { \"internalType\": \"uint40\", \"name\": \"epochsCompleted\", \"type\": \"uint40\" }, { \"internalType\": \"uint96\", \"name\": \"voteCost\", \"type\": \"uint96\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"user\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"epoch\", \"type\": \"uint256\" }], \"name\": \"getUserVotes\", \"outputs\": [{ \"internalType\": \"uint256[]\", \"name\": \"\", \"type\": \"uint256[]\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"appId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"epoch\", \"type\": \"uint256\" }], \"name\": \"getVotesForApp\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"user\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"roles\", \"type\": \"uint256\" }], \"name\": \"grantRoles\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"user\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"roles\", \"type\": \"uint256\" }], \"name\": \"hasAllRoles\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"user\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"roles\", \"type\": \"uint256\" }], \"name\": \"hasAnyRole\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint40\", \"name\": \"_startTime\", \"type\": \"uint40\" }, { \"internalType\": \"uint40\", \"name\": \"_epochDuration\", \"type\": \"uint40\" }, { \"internalType\": \"uint96\", \"name\": \"_voteCost\", \"type\": \"uint96\" }], \"name\": \"initializeSchedule\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"nextSchedule\", \"outputs\": [{ \"internalType\": \"uint40\", \"name\": \"startTime\", \"type\": \"uint40\" }, { \"internalType\": \"uint40\", \"name\": \"epochDuration\", \"type\": \"uint40\" }, { \"internalType\": \"uint40\", \"name\": \"epochsCompleted\", \"type\": \"uint40\" }, { \"internalType\": \"uint96\", \"name\": \"voteCost\", \"type\": \"uint96\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"result\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"pendingOwner\", \"type\": \"address\" }], \"name\": \"ownershipHandoverExpiresAt\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"result\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"renounceOwnership\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"roles\", \"type\": \"uint256\" }], \"name\": \"renounceRoles\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"requestOwnershipHandover\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"user\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"roles\", \"type\": \"uint256\" }], \"name\": \"revokeRoles\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"user\", \"type\": \"address\" }], \"name\": \"rolesOf\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"roles\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"newAppRegistry\", \"type\": \"address\" }], \"name\": \"setAppRegistry\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"newGovernor\", \"type\": \"address\" }], \"name\": \"setVoteGovernor\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"newOwner\", \"type\": \"address\" }], \"name\": \"transferOwnership\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"user\", \"type\": \"address\" }], \"name\": \"userVoteSpend\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"user\", \"type\": \"address\" }], \"name\": \"userVotesRemaining\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"voteCost\", \"outputs\": [{ \"internalType\": \"uint96\", \"name\": \"\", \"type\": \"uint96\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"appId\", \"type\": \"uint256\" }], \"name\": \"voteForApp\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"voteGovernor\", \"outputs\": [{ \"internalType\": \"contract IVoteGovernor\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"withdraw\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }] as const",
      "type": "registry:lib"
    },
    {
      "path": "registry/new-york/blocks/abstract-voting-button/lib/voting-utils.ts",
      "content": "import { ABSTRACT_VOTING_ADDRESS, ABSTRACT_VOTING_ABI } from \"./voting-contract\"\n\n/**\n * Custom error class for Abstract voting configuration issues.\n * These errors should bubble up to show helpful messages to developers.\n */\nexport class VotingConfigurationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"VotingConfigurationError\";\n  }\n}\n\n/**\n * Check if a user has voted for a specific app in the current epoch\n */\nexport function hasUserVotedForApp(userVotes: bigint[], appId: bigint): boolean {\n  return userVotes.some(vote => vote === appId)\n}\n\n/**\n * Format app ID to ensure it's a valid bigint\n */\nexport function formatAppId(appId: string | number | bigint): bigint {\n  return BigInt(appId)\n}\n\n/**\n * Validate that an app ID is a positive number\n */\nexport function isValidAppId(appId: string | number | bigint): boolean {\n  try {\n    const id = BigInt(appId)\n    return id > BigInt(0)\n  } catch {\n    return false\n  }\n}\n\nexport { ABSTRACT_VOTING_ADDRESS, ABSTRACT_VOTING_ABI }",
      "type": "registry:lib"
    }
  ]
}