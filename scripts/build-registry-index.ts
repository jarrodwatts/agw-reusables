import { promises as fs } from "fs"
import path from "path"
import { rimraf } from "rimraf"

interface RegistryItem {
  name: string
  type: string
  description?: string
  registryDependencies?: string[]
  files: Array<{
    path: string
    type: string
    target?: string
  }>
}

async function buildRegistryIndex() {
  const publicRDir = path.join(process.cwd(), "public/r")
  const outputPath = path.join(process.cwd(), "registry/__index__.ts")
  
  try {
    // Read all JSON files from public/r
    const files = await fs.readdir(publicRDir)
    const jsonFiles = files.filter(file => file.endsWith('.json'))
    
    const items: RegistryItem[] = []
    
    for (const file of jsonFiles) {
      const filePath = path.join(publicRDir, file)
      const content = await fs.readFile(filePath, 'utf-8')
      const item = JSON.parse(content) as RegistryItem
      items.push(item)
    }
    
    let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry-index.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`

    for (const item of items) {
      // Find the main component file (usually the first component or page file)
      const componentFile = item.files.find(file => 
        file.type === "registry:component" || file.type === "registry:page"
      ) || item.files[0]
      
      const componentPath = componentFile ? `@/${componentFile.path}` : ""

      index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files.map((file) => `{
      path: "${file.path}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`).join(", ")}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "${item.name}"
      return { default: mod.default || mod[exportName] }
    })`
        : "null"
    },
    categories: undefined,
    meta: undefined,
  },`
    }

    index += `
}`

    console.log(`#️⃣  ${items.length} components found`)

    // Ensure the registry directory exists
    await fs.mkdir(path.dirname(outputPath), { recursive: true })
    
    // Remove existing file and write new one
    rimraf.sync(outputPath)
    await fs.writeFile(outputPath, index)
    
    console.log(`✓ Generated registry/__index__.ts`)
    
  } catch (error) {
    console.error('Error building registry index:', error)
    process.exit(1)
  }
}

buildRegistryIndex()