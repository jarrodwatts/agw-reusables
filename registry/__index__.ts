/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry-index.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {
  "abstract-app-voting": {
    name: "abstract-app-voting",
    description: "A voting button for Abstract apps that checks vote status and submits votes via Abstract Global Wallet",
    type: "registry:component",
    registryDependencies: ["button"],
    files: [{
      path: "registry/new-york/blocks/abstract-voting-button/abstract-voting-button.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/abstract-voting-button/hooks/use-user-vote-status.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/abstract-voting-button/hooks/use-vote-for-app.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/abstract-voting-button/lib/voting-contract.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/abstract-voting-button/lib/voting-utils.ts",
      type: "registry:lib",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york/examples/abstract-app-voting-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "abstract-app-voting"
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "abstract-contracts": {
    name: "abstract-contracts",
    description: "Configuration for common Abstract network contract addresses and ABIs for tokens and DEX infrastructure",
    type: "registry:lib",
    registryDependencies: [],
    files: [{
      path: "registry/new-york/blocks/abstract-contracts/abstract-contracts.tsx",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/abstract-contracts/lib/types.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/abstract-contracts/lib/contracts.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/abstract-contracts/lib/utils.ts",
      type: "registry:lib",
      target: ""
    }],
    component: null,
    categories: undefined,
    meta: undefined,
  },
  "abstract-profile": {
    name: "abstract-profile",
    description: "A profile component that displays user profile pictures from Abstract Portal with tier-based styling and loading states",
    type: "registry:component",
    registryDependencies: ["avatar","tooltip","skeleton"],
    files: [{
      path: "registry/new-york/blocks/abstract-profile/abstract-profile.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/abstract-profile/hooks/use-abstract-profile.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/abstract-profile/lib/tier-colors.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/abstract-profile/lib/address-utils.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/abstract-profile/lib/get-user-profile.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "app/api/user-profile/[address]/route.ts",
      type: "registry:page",
      target: "app/api/user-profile/[address]/route.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york/examples/abstract-profile-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "abstract-profile"
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "agw-provider": {
    name: "agw-provider",
    description: "Provider component that wraps your application with Abstract Global Wallet and React Query",
    type: "registry:component",
    registryDependencies: ["sonner"],
    files: [{
      path: "registry/new-york/blocks/agw-provider/agw-provider.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "config/chain.ts",
      type: "registry:lib",
      target: "config/chain.ts"
    }, {
      path: "config/viem-clients.ts",
      type: "registry:lib",
      target: "config/viem-clients.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york/blocks/agw-provider/agw-provider.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "agw-provider"
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "claude-config": {
    name: "claude-config",
    description: "Claude Code project instructions and MCP server configuration optimized for Abstract ecosystem development with AGW, wagmi, and Next.js",
    type: "registry:lib",
    registryDependencies: [],
    files: [{
      path: "registry/new-york/lib/CLAUDE.md",
      type: "registry:lib",
      target: "CLAUDE.md"
    }, {
      path: "registry/new-york/lib/.claude/settings.json",
      type: "registry:lib",
      target: ".claude/settings.json"
    }, {
      path: "registry/new-york/lib/.mcp.json",
      type: "registry:lib",
      target: ".mcp.json"
    }],
    component: null,
    categories: undefined,
    meta: undefined,
  },
  "connect-wallet-button": {
    name: "connect-wallet-button",
    description: "A connect wallet button using Abstract Global Wallet with dropdown menu when connected",
    type: "registry:component",
    registryDependencies: ["button","dropdown-menu"],
    files: [{
      path: "registry/new-york/blocks/connect-wallet-button/connect-wallet-button.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york/examples/connect-wallet-button-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "connect-wallet-button"
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "cursor-ai-config": {
    name: "cursor-ai-config",
    description: "Cursor project rules and MCP configuration optimized for Abstract ecosystem development with AGW, wagmi, and Next.js",
    type: "registry:lib",
    registryDependencies: [],
    files: [{
      path: ".cursor/rules/default.mdc",
      type: "registry:lib",
      target: ".cursor/rules/default.mdc"
    }, {
      path: ".cursor/mcp.json",
      type: "registry:lib",
      target: ".cursor/mcp.json"
    }],
    component: null,
    categories: undefined,
    meta: undefined,
  },
  "nft-gallery": {
    name: "nft-gallery",
    description: "A responsive NFT gallery component that displays a user's NFTs from the Abstract backend with loading states and customizable layout options",
    type: "registry:component",
    registryDependencies: ["card","badge","skeleton","aspect-ratio","alert"],
    files: [{
      path: "registry/new-york/blocks/nft-gallery/nft-gallery.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/nft-gallery/hooks/use-nfts.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/nft-gallery/lib/types.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "app/api/user-nfts/[address]/route.ts",
      type: "registry:lib",
      target: "app/api/user-nfts/[address]/route.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york/examples/nft-gallery-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "nft-gallery"
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "onboarding-dialog": {
    name: "onboarding-dialog",
    description: "A configurable multi-step onboarding dialog that guides users through AGW authentication (wallet connection, SIWE, session keys) with progress indication",
    type: "registry:component",
    registryDependencies: ["dialog","button"],
    files: [{
      path: "registry/new-york/blocks/onboarding-dialog/onboarding-dialog.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/onboarding-dialog/hooks/use-onboarding.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/onboarding-dialog/lib/require-onboarding.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/onboarding-dialog/lib/onboarding-context.tsx",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/onboarding-dialog/onboarder.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/connect-wallet-button/connect-wallet-button.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/siwe-button/siwe-button.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/siwe-button/hooks/use-siwe-auth-query.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/siwe-button/hooks/use-siwe-sign-in-mutation.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/siwe-button/hooks/use-siwe-logout-mutation.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/siwe-button/lib/types.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "config/auth.ts",
      type: "registry:lib",
      target: "config/auth.ts"
    }, {
      path: "config/chain.ts",
      type: "registry:lib",
      target: "config/chain.ts"
    }, {
      path: "registry/new-york/blocks/siwe-button/lib/auth-server.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "app/api/auth/nonce/route.ts",
      type: "registry:page",
      target: "app/api/auth/nonce/route.ts"
    }, {
      path: "app/api/auth/verify/route.ts",
      type: "registry:page",
      target: "app/api/auth/verify/route.ts"
    }, {
      path: "app/api/auth/user/route.ts",
      type: "registry:page",
      target: "app/api/auth/user/route.ts"
    }, {
      path: "app/api/auth/logout/route.ts",
      type: "registry:page",
      target: "app/api/auth/logout/route.ts"
    }, {
      path: "registry/new-york/blocks/onboarding-dialog/onboarding-dialog.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/session-key-button.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/hooks/use-session-key.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/hooks/use-create-session-key.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/hooks/use-revoke-session-key.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/lib/get-stored-session-key.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/lib/create-and-store-session-key.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/lib/clear-stored-session-key.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/lib/session-encryption-utils.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/lib/validate-session-key.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "config/session-key-policies.ts",
      type: "registry:lib",
      target: "config/session-key-policies.ts"
    }, {
      path: "config/viem-clients.ts",
      type: "registry:lib",
      target: "config/viem-clients.ts"
    }, {
      path: "registry/new-york/blocks/connect-wallet-button/connect-wallet-button.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york/examples/onboarding-dialog-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "onboarding-dialog"
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "portfolio-chart": {
    name: "portfolio-chart",
    description: "An interactive area chart that displays Abstract Global Wallet portfolio value over time with multiple time period selections",
    type: "registry:component",
    registryDependencies: ["chart","button","skeleton"],
    files: [{
      path: "registry/new-york/blocks/portfolio-chart/portfolio-chart.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/portfolio-chart/hooks/use-portfolio-data.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/portfolio-chart/lib/portfolio-utils.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "app/api/user-portfolio/[address]/route.ts",
      type: "registry:lib",
      target: "app/api/user-portfolio/[address]/route.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york/examples/portfolio-chart-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "portfolio-chart"
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "session-keys": {
    name: "session-keys",
    description: "A comprehensive session key management button that handles creation, validation, and revocation of Abstract Global Wallet session keys",
    type: "registry:component",
    registryDependencies: ["button","dropdown-menu"],
    files: [{
      path: "registry/new-york/blocks/session-keys/session-key-button.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/hooks/use-session-key.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/hooks/use-create-session-key.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/hooks/use-revoke-session-key.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/lib/get-stored-session-key.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/lib/create-and-store-session-key.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/lib/clear-stored-session-key.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/lib/session-encryption-utils.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/session-keys/lib/validate-session-key.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "config/session-key-policies.ts",
      type: "registry:lib",
      target: "config/session-key-policies.ts"
    }, {
      path: "config/viem-clients.ts",
      type: "registry:lib",
      target: "config/viem-clients.ts"
    }, {
      path: "registry/new-york/blocks/connect-wallet-button/connect-wallet-button.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york/examples/session-keys-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "session-keys"
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "siwe-button": {
    name: "siwe-button",
    description: "A streamlined SIWE authentication button that handles wallet connection, message signing, and authentication state",
    type: "registry:component",
    registryDependencies: ["button","card","sonner","dropdown-menu"],
    files: [{
      path: "registry/new-york/blocks/connect-wallet-button/connect-wallet-button.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/siwe-button/siwe-button.tsx",
      type: "registry:component",
      target: ""
    }, {
      path: "registry/new-york/blocks/siwe-button/hooks/use-siwe-auth-query.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/siwe-button/hooks/use-siwe-sign-in-mutation.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/siwe-button/hooks/use-siwe-logout-mutation.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/siwe-button/lib/types.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "config/auth.ts",
      type: "registry:lib",
      target: "config/auth.ts"
    }, {
      path: "config/chain.ts",
      type: "registry:lib",
      target: "config/chain.ts"
    }, {
      path: "registry/new-york/blocks/siwe-button/lib/auth-server.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "app/api/auth/nonce/route.ts",
      type: "registry:page",
      target: "app/api/auth/nonce/route.ts"
    }, {
      path: "app/api/auth/verify/route.ts",
      type: "registry:page",
      target: "app/api/auth/verify/route.ts"
    }, {
      path: "app/api/auth/user/route.ts",
      type: "registry:page",
      target: "app/api/auth/user/route.ts"
    }, {
      path: "app/api/auth/logout/route.ts",
      type: "registry:page",
      target: "app/api/auth/logout/route.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york/examples/siwe-button-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "siwe-button"
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "use-optimistic-write-contract": {
    name: "use-optimistic-write-contract",
    description: "An experimental hook for optimistic transaction execution using Abstract's unstable_sendRawTransactionWithDetailedOutput endpoint to get instant transaction feedback",
    type: "registry:hook",
    registryDependencies: [],
    files: [{
      path: "registry/new-york/blocks/use-optimistic-write-contract/hooks/use-optimistic-write-contract.ts",
      type: "registry:hook",
      target: ""
    }, {
      path: "registry/new-york/blocks/use-optimistic-write-contract/lib/types.ts",
      type: "registry:lib",
      target: ""
    }, {
      path: "registry/new-york/blocks/use-optimistic-write-contract/lib/abstract-api.ts",
      type: "registry:lib",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york/examples/use-optimistic-write-contract-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "use-optimistic-write-contract"
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
}